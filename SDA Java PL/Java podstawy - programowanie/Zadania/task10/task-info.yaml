type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 143
    length: 12
    placeholder_text: // your code
    initial_state:
      length: 12
      offset: 143
    initialized_from_dependency: false
    possible_answer: |2-
              String text = scanner.nextLine();
              text = text.replaceAll(" ", "");    // usuwa spacje
              text = text.toLowerCase();     // w palindromie nie liczy się wielkość liter

              boolean palindrom = true;
              for (int i = 0; i < text.length() / 2; i++) {
                  if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {
                      palindrom = false;
                      break;
                  }
              }
              System.out.println(palindrom);

              // Alternatywnie, zamiast iteracji znak po znaku, można odwrócić Stringa
              String textReverse = new StringBuilder(text).reverse().toString();
              //System.out.println(text.equals(textReverse));
    selected: false
    status: Unchecked
  text: |-
    import java.util.Scanner;

    public class Task {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

    // your code
        }
    }
  learner_created: false
- name: test/BaseTest.java
  visible: false
  text: |
    import org.junit.After;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.PrintStream;
    import java.util.function.Consumer;

    import static org.junit.Assert.assertEquals;

    public class BaseTest {

        @After
        public void restoreStreams() {
            System.setOut(System.out);
            System.setIn(System.in);
        }

        protected void runTest(String input, String expected) {
            String actual = run(Task::main, input);

            assertEquals("Zly wynik dla ponizszych danych: \n" + input + "\n", expected, actual);
        }

        private String run(Consumer<String[]> method, String input) {
            System.setIn(new ByteArrayInputStream(input.getBytes()));

            ByteArrayOutputStream outContent = new ByteArrayOutputStream();
            System.setOut(new PrintStream(outContent));

            method.accept(new String[]{});
            return outContent.toString().trim();
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Test;

    public class Tests extends BaseTest {

        @Test
        public void testSolution() {
            runTest("kajak", "true");
        }

        @Test
        public void testSolution2() {
            runTest("Ka jak", "true");
        }

        @Test
        public void testSolution3() {
            runTest("abccba", "true");
        }

        @Test
        public void testSolution4() {
            runTest("ab bc", "false");
        }

        @Test
        public void testSolution5() {
            runTest("ab ca", "false");
        }

    }
  learner_created: false
status: Unchecked
record: -1
