type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 143
    length: 12
    placeholder_text: // your code
    initial_state:
      length: 12
      offset: 143
    initialized_from_dependency: false
    possible_answer: |2-
              int a = scanner.nextInt();
              int b = scanner.nextInt();

              // Dobrym, choć mało wyszukanym rozwiązaniem będzie zastosowanie instrukcji warunkowej:
              if ((a > 0 && b < 0) || (a < 0 && b > 0)) {
                  System.out.println(true);
              } else {
                  System.out.println(false);
              }

              // równoważny kod można zapisać w skróconej formie:
              boolean result = (a > 0 && b < 0) || (a < 0 && b > 0);
              //System.out.println(result);
              // wyrażene, które normalnie umieszczamy wewnątrz if'a
              // jest zawsze wyliczane do wartości typu boolean,
              // którą w tym przypadku możemy po prostu wydrukować

              // Alternatywnie, możemy skorzystać z matematyki:
              // Jeżeli liczby mają mieć różne znaki, to jedna liczba powinna być z plusem, druga z minusem.
              // Wynik mnożenia liczby dodatniej i ujemnej zawsze będzie ujemny.
              // Jeśli wynik będzie dodatni, to znaczy, że albo obie liczby były dodatnie, albo obie były ujemne.
              // Jeśli będzie równy 0, to znaczy, że co najmniej jedna z liczb była równa zero.

              //System.out.println((long)a * b < 0);

              // Zwróć tylko uwagę, że dowolną z liczb trzeba rzutować na typ long - ponieważ w razie mnożenia dwóch bardzo dużych intów
              // możemy przekroczyć maksymalny dopuszczalny zakres i dostać błędne wyniki naszego porównania
    selected: false
    status: Unchecked
  text: |-
    import java.util.Scanner;

    public class Task {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

    // your code
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Test;

    public class Tests extends BaseTest {

        @Test
        public void testSolution() {
            runTest("-1\n1", "true");
        }

        @Test
        public void testSolution2() {
            runTest("0\n1", "false");
        }

        @Test
        public void testSolution3() {
            runTest("1\n0", "false");
        }

        @Test
        public void testSolution4() {
            runTest("1\n1", "false");
        }

        @Test
        public void testSolution5() {
            runTest("-1\n-1", "false");
        }
    }
  learner_created: false
- name: test/BaseTest.java
  visible: false
  text: |
    import org.junit.After;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.PrintStream;
    import java.util.function.Consumer;

    import static org.junit.Assert.assertEquals;

    public class BaseTest {

        @After
        public void restoreStreams() {
            System.setOut(System.out);
            System.setIn(System.in);
        }

        protected void runTest(String input, String expected) {
            String actual = run(Task::main, input);

            assertEquals("Zly wynik dla ponizszych danych: \n" + input + "\n", expected, actual);
        }

        private String run(Consumer<String[]> method, String input) {
            System.setIn(new ByteArrayInputStream(input.getBytes()));

            ByteArrayOutputStream outContent = new ByteArrayOutputStream();
            System.setOut(new PrintStream(outContent));

            method.accept(new String[]{});
            return outContent.toString().trim();
        }
    }
  learner_created: false
status: Unchecked
record: -1
