type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 143
    length: 12
    placeholder_text: // your code
    initial_state:
      length: 12
      offset: 143
    initialized_from_dependency: false
    possible_answer: |2-
              String dateText = scanner.nextLine();
              java.time.LocalDate date = java.time.LocalDate.parse(dateText);

              java.time.LocalDate nextFriday = date;
              while (nextFriday.getDayOfWeek() != java.time.DayOfWeek.FRIDAY) {
                  nextFriday = nextFriday.plusDays(1);
              }

              System.out.println(nextFriday);

              // Alternatywnie, wczytując się w dokumentację Date Time API, możemy odnaleźć następujący sposób:
              nextFriday = date.with(java.time.temporal.TemporalAdjusters.next(java.time.DayOfWeek.FRIDAY));
              // natomiast jest to bardziej zaawansowane zagadnienie, wykraczające poza zakres tego bloku
    selected: false
    status: Unchecked
  text: |-
    import java.util.Scanner;

    public class Task {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

    // your code
        }
    }
  learner_created: false
- name: test/BaseTest.java
  visible: false
  text: |
    import org.junit.After;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.PrintStream;
    import java.util.function.Consumer;

    import static org.junit.Assert.assertEquals;

    public class BaseTest {

        @After
        public void restoreStreams() {
            System.setOut(System.out);
            System.setIn(System.in);
        }

        protected void runTest(String input, String expected) {
            String actual = run(Task::main, input);

            assertEquals("Zly wynik dla ponizszych danych: \n" + input + "\n", expected, actual);
        }

        private String run(Consumer<String[]> method, String input) {
            System.setIn(new ByteArrayInputStream(input.getBytes()));

            ByteArrayOutputStream outContent = new ByteArrayOutputStream();
            System.setOut(new PrintStream(outContent));

            method.accept(new String[]{});
            return outContent.toString().trim();
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Test;

    public class Tests extends BaseTest {

        @Test
        public void testSolution() {
            runTest("2020-05-02", "2020-05-08");
        }

        @Test
        public void testSolution2() {
            runTest("2020-05-22", "2020-05-22");
        }

        @Test
        public void testSolution3() {
            runTest("2020-12-31", "2021-01-01");
        }

    }
  learner_created: false
status: Unchecked
record: -1
