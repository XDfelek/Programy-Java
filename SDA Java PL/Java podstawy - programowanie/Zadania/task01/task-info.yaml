type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 143
    length: 12
    placeholder_text: // your code
    initial_state:
      length: 12
      offset: 143
    initialized_from_dependency: false
    possible_answer: |2-
              float speed = scanner.nextFloat();
              System.out.println(speed * 1.6);
    selected: false
    status: Unchecked
  text: |-
    import java.util.Scanner;

    public class Task {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

    // your code
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Test;

    public class Tests extends BaseTest {

        @Test
        public void testSolution() {
            runTestReturningSingleFloat("100", 160);
        }

        @Test
        public void testSolution2() {
            runTestReturningSingleFloat("0", 0);
        }

        @Test
        public void testSolution3() {
            runTestReturningSingleFloat("50.83", 81.328f);
        }
    }
  learner_created: false
- name: test/BaseTest.java
  visible: false
  text: |
    import org.junit.After;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.PrintStream;
    import java.util.Locale;
    import java.util.function.Consumer;

    import static org.junit.Assert.assertEquals;

    public class BaseTest {

        private static Locale systemLocale;
        private static final float FLOAT_TESTS_DELTA = 0.1f;

        @BeforeClass
        public static void beforeClass() {
            systemLocale = Locale.getDefault();
            Locale.setDefault(new Locale("pl-PL"));
        }

        @AfterClass
        public static void afterClass() {
            Locale.setDefault(systemLocale);
        }

        @After
        public void restoreStreams() {
            System.setOut(System.out);
            System.setIn(System.in);
        }

        protected void runTestReturningSingleFloat(String input, float expected) {
            float actual = runForFloat(Task::main, input);

            assertEquals(expected, actual, FLOAT_TESTS_DELTA);
        }

        private float runForFloat(Consumer<String[]> method, String input) {
            return Float.parseFloat(run(method, input));
        }

        private String run(Consumer<String[]> method, String input) {
            System.setIn(new ByteArrayInputStream(input.getBytes()));

            ByteArrayOutputStream outContent = new ByteArrayOutputStream();
            System.setOut(new PrintStream(outContent));

            method.accept(new String[]{});
            return outContent.toString().trim();
        }
    }
  learner_created: false
status: Unchecked
record: -1
