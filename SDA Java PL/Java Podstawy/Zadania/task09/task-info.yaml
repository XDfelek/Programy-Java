type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 150
    length: 459
    placeholder_text: // Tu zaimplementuj rozwiązanie
    initial_state:
      length: 31
      offset: 150
    initialized_from_dependency: false
    possible_answer: |-
      int number;
              int max = Integer.MIN_VALUE;
              int min = Integer.MAX_VALUE;

              do {
                  number = scanner.nextInt();

                  if (number > max) {
                      max = number;
                  }

                  if (number < min) {
                      min = number;
                  }
              } while (number != 0);

              System.out.println(max + min);
              System.out.println((max + min) / 2.0f);
    selected: true
    status: Solved
  text: |-
    import java.util.Scanner;

    public class Task {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // Tu zaimplementuj rozwiązanie
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.After;
    import org.junit.Before;
    import org.junit.Test;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.InputStream;
    import java.io.PrintStream;

    import static org.junit.Assert.assertEquals;

    public class Tests {

        private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
        private final PrintStream originalOut = System.out;
        private final PrintStream originalErr = System.err;
        private final InputStream originalIn = System.in;

        @Before
        public void setUpStreams() {
            System.setOut(new PrintStream(outContent));
            System.setErr(new PrintStream(errContent));
        }

        @After
        public void restoreStreams() {
            System.setOut(originalOut);
            System.setErr(originalErr);
            System.setIn(originalIn);
        }

        @Test
        public void testSolution() {
            String inputText = "1\n-4\n2\n17\n0";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            assertEquals("Dla ciągu liczb: 1, -4, 2, 17, 0, program powinien wypisać w konsoli liczby: 13, 6.5.", "13\n6.5", outContent.toString().trim().replaceAll("\r\n", "\n"));
        }

        @Test
        public void testSolution2() {
            String inputText = "11\n-44\n52\n327\n0";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            assertEquals("Dla ciągu liczb: 11, -44, 52, 327, 0, program powinien wypisać w konsoli liczby: 283, 141.5.", "283\n141.5", outContent.toString().trim().replaceAll("\r\n", "\n"));
        }

        @Test
        public void testSolution3() {
            String inputText = "12\n24\n-24\n0";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            assertEquals("Dla ciągu liczb: 12, 24, -24, 0, program powinien wypisać w konsoli liczby: 0, 0.0", "0\n0.0", outContent.toString().trim().replaceAll("\r\n", "\n"));
        }

    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 05 Sep 2020 18:14:51 UTC
record: -1
