type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 151
    length: 31
    placeholder_text: // Tu zaimplementuj rozwiązanie
    initial_state:
      length: 31
      offset: 151
    initialized_from_dependency: false
    possible_answer: |-
      char[] text = scanner.nextLine().toCharArray();
              int n = scanner.nextInt();
              char[] cipheredText = new char[text.length];

              for (int i = 0; i < text.length; i++) {
                  if (text[i] == ' ') {
                      cipheredText[i] = text[i];
                      continue;
                  }

                  int charCode = ((int) text[i] + n) - 96;
                  charCode = charCode % 26 + 96;

                  cipheredText[i] = (char) charCode;
              }

              System.out.println(new String(cipheredText));
    selected: false
    status: Unchecked
  text: |-
    import java.util.Scanner;

    public class Task {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

            // Tu zaimplementuj rozwiązanie
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.After;
    import org.junit.Before;
    import org.junit.Test;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.InputStream;
    import java.io.PrintStream;

    import static org.junit.Assert.assertEquals;

    public class Tests {

        private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
        private final PrintStream originalOut = System.out;
        private final PrintStream originalErr = System.err;
        private final InputStream originalIn = System.in;

        @Before
        public void setUpStreams() {
            System.setOut(new PrintStream(outContent));
            System.setErr(new PrintStream(errContent));
        }

        @After
        public void restoreStreams() {
            System.setOut(originalOut);
            System.setErr(originalErr);
            System.setIn(originalIn);
        }

        @Test
        public void testSolution() {
            String inputText = "ala ma kota\n1";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            String expected = "bmb nb lpub";

            assertEquals(String.format("Dla tekstu %s oraz n %d, program powinien wypisać w konsoli: %s.", inputText, 1, expected), expected, outContent.toString().trim());
        }

        @Test
        public void testSolution2() {
            String inputText = "ala ma kota\n26";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            String expected = "ala ma kota";

            assertEquals(String.format("Dla tekstu %s oraz n %d, program powinien wypisać w konsoli: %s.", inputText, 26, expected), expected, outContent.toString().trim());
        }

        @Test
        public void testSolution3() {
            String inputText = "To jest zdanie\n13";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            String expected = "ab wrfg mqnavr";

            assertEquals(String.format("Dla tekstu %s oraz n %d, program powinien wypisać w konsoli: %s.", inputText, 13, expected), expected, outContent.toString().trim());
        }

    }
  learner_created: false
status: Unchecked
record: -1
